---
- name: Detect storage hardware capable of being monitored with SMART
  ansible.builtin.find:
    paths: /dev/
    file_type: any
    patterns:
      - "nvme[0-9]*"
      - "sd[a-z]*"
  register: _smart_devices

- name: Install smartmontools when compatable hardware is detected
  ansible.builtin.apt:
    pkg: "smartmontools"
    install_recommends: false
    state: "{{ 'present' if _smart_devices.matched >= 1 else 'absent' }}"
    purge: "{{ 'false' if _smart_devices.matched >= 1 else 'true' }}"

- name: Configure IO schedulers
  ansible.builtin.template:
    src: "io-scheduler.rules"
    dest: "/etc/udev/rules.d/60-io-scheduler.rules"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r"
  when: io_scheduler | length >= 1
  notify: reload udevadm

- name: Configure swap space
  ansible.builtin.include_tasks:
    file: swap.yml
  when:
    - swap_file != ""
    - swap_file_size != ""
    - swap_file_size | regex_search('^[0-9\.]+') | float > 0

- name: Configure NFS storage
  ansible.builtin.include_tasks:
    file: nfs.yml
  when: storage_mounts | selectattr('fstype', 'match', 'nfs\d?') | list | length > 0

- name: Get mounted filesystems
  ansible.builtin.set_fact:
    mounted_filesystems: "{{ ansible_mounts | json_query('[].mount') }}"

- name: Configure and mount filesystems
  ansible.posix.mount:
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts | default(omit) }}"
    state: "{{ (item.path in mounted_filesystems) | ternary('present', 'mounted') }}"
  loop: "{{ storage_mounts }}"
  loop_control:
    label: "{{ item.path }}"

- name: Configure scratch storage
  ansible.builtin.include_tasks:
    file: scratch.yml
  when: "scratch_backend_location != ''"
